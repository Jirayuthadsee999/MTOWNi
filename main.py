import discord
from discord.ext import commands, tasks
from discord.ui import View, Button, Modal, TextInput
import json, os, shutil
from datetime import datetime, time
import pytz

# ================= ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ =================
TOKEN = "MTM5ODYxODIwNzc2NTM5NzYxNQ.GtG4f7.om6a8fL0PUSKO2-cjfYrB3B-Xe2SBN24QnQX6M"

DEPARTMENT_CHANNELS = {  # ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    "‡∏ï‡∏≥‡∏£‡∏ß‡∏à": 1337754520335290431,
    "‡∏´‡∏°‡∏≠": 1308459559047663636,
    "‡∏™‡∏†‡∏≤": 1337974934638690386
}

DEPARTMENTS = {  # ‡∏¢‡∏®‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
    "‡∏ï‡∏≥‡∏£‡∏ß‡∏à": 1309903906171650111,
    "‡∏´‡∏°‡∏≠": 1309905561378095225,
    "‡∏™‡∏†‡∏≤": 1329732963914747936
}

DEPARTMENT_IMAGES = {  # ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
    "‡∏ï‡∏≥‡∏£‡∏ß‡∏à": "https://cdn.discordapp.com/attachments/1385580108739379360/1408306378191409242/1394955799368830996.jpg?ex=68a94305&is=68a7f185&hm=cf6511772244abe3321035c34bbadaf616324e240b433ce94c9c823f248ed528&",
    "‡∏´‡∏°‡∏≠": "https://cdn.discordapp.com/attachments/1385580108739379360/1408306378191409242/1394955799368830996.jpg?ex=68a94305&is=68a7f185&hm=cf6511772244abe3321035c34bbadaf616324e240b433ce94c9c823f248ed528&",
    "‡∏™‡∏†‡∏≤": "https://cdn.discordapp.com/attachments/1385580108739379360/1408306378191409242/1394955799368830996.jpg?ex=68a94305&is=68a7f185&hm=cf6511772244abe3321035c34bbadaf616324e240b433ce94c9c823f248ed528&"
}

ADMIN_CHANNEL_ID = 1400060987834368042  # ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
tz = pytz.timezone('Asia/Bangkok')
DATA_FILE = "checkin_data.json"
BACKUP_FILE = "checkin_data_backup.json"

MIN_HOURS = 3
MAX_ABSENT_DAYS = 3
MAX_SHORT_HOURS = 2  # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 3 ‡∏õ‡∏•‡∏î‡∏¢‡∏®
# ===========================================

intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ================= ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå =================
def backup_data():
    if os.path.exists(DATA_FILE):
        shutil.copy(DATA_FILE, BACKUP_FILE)
def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w") as f:
            json.dump({"daily_checkins": {}, "work_hours": {}, "checkin_times": {}, "absent_count": {}, "short_hours_count": {}}, f)
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except json.JSONDecodeError:
        with open(DATA_FILE, "w") as f:
            json.dump({"daily_checkins": {}, "work_hours": {}, "checkin_times": {}, "absent_count": {}, "short_hours_count": {}}, f)
        return {"daily_checkins": {}, "work_hours": {}, "checkin_times": {}, "absent_count": {}, "short_hours_count": {}}
def save_data(data):
    backup_data()
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)
data = load_data()

def thai_time():
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

async def send_warning(member, msg, guild):
    try:
        await member.send(msg)
    except:
        admin_channel = guild.get_channel(ADMIN_CHANNEL_ID)
        if admin_channel:
            await admin_channel.send(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡∏ñ‡∏∂‡∏á {member.mention} ‡πÑ‡∏î‡πâ: {msg}")

async def remove_role_and_reset(member, role_id, guild):
    role = guild.get_role(role_id)
    if role in member.roles:
        await member.remove_roles(role)
    uid = str(member.id)
    data["work_hours"].pop(uid, None)
    data["absent_count"].pop(uid, None)
    data["short_hours_count"].pop(uid, None)
    save_data(data)
    # DM ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏î‡∏¢‡∏®
    try:
        await member.send(f"‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏î‡∏¢‡∏® **{role.name}** ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏î‡πÄ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô {MAX_ABSENT_DAYS} ‡∏ß‡∏±‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
    except:
        pass
    # ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    admin_channel = guild.get_channel(ADMIN_CHANNEL_ID)
    if admin_channel:
        embed = discord.Embed(
            title="‡∏õ‡∏•‡∏î‡∏¢‡∏®",
            description=f"{member.mention} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏î‡∏¢‡∏® {role.name} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏î‡πÄ‡∏ß‡∏£",
            color=discord.Color.red()
        )
        await admin_channel.send(embed=embed)

# ================= Modal =================
class CheckinModal(Modal):
    def __init__(self, action, department):
        super().__init__(title=f"{action}‡πÄ‡∏ß‡∏£ ({department})")
        self.action = action
        self.department = department
        self.name_input = TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏° (Firstname_Lastname)", placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: Firstname_Lastname")
        self.add_item(self.name_input)
    async def on_submit(self, interaction: discord.Interaction):
        name = self.name_input.value
        if not name or "_" not in name:
            await interaction.response.send_message("**‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á** ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Firstname_Lastname", ephemeral=True)
            return
        first, last = name.split("_", 1)
        if not (first[0].isupper() and last[0].isupper() and first.isalpha() and last.isalpha()):
            await interaction.response.send_message("**‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á** ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà", ephemeral=True)
            return
        user_id = str(interaction.user.id)
        today = datetime.now(tz).strftime("%Y-%m-%d")
        if today not in data["daily_checkins"]:
            data["daily_checkins"][today] = {dep: [] for dep in DEPARTMENTS.keys()}

        if self.action == "‡∏≠‡∏≠‡∏Å" and user_id not in data["checkin_times"]:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡πÄ‡∏ß‡∏£‡πÑ‡∏î‡πâ!", ephemeral=True)
            return

        await interaction.response.send_message(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á **‡∏£‡∏π‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£{self.action}‡πÄ‡∏ß‡∏£** ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ:", ephemeral=True)
        def check(msg):
            return msg.author.id == interaction.user.id and msg.attachments and msg.channel == interaction.channel
        try:
            msg = await bot.wait_for("message", timeout=60.0, check=check)
        except:
            await interaction.followup.send(f"‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£{self.action}‡πÄ‡∏ß‡∏£", ephemeral=True)
            return

        file = await msg.attachments[0].to_file()
        await msg.delete()

        if self.action == "‡πÄ‡∏Ç‡πâ‡∏≤":
            if user_id not in data["daily_checkins"][today][self.department]:
                data["daily_checkins"][today][self.department].append(user_id)
            data["checkin_times"][user_id] = datetime.now(tz).isoformat()
        else:
            start_time_str = data["checkin_times"].get(user_id)
            if start_time_str:
                start_time = datetime.fromisoformat(start_time_str)
                hours = (datetime.now(tz) - start_time).seconds / 3600
                data["work_hours"][user_id] = data["work_hours"].get(user_id, 0) + hours
                del data["checkin_times"][user_id]
            if user_id in data["daily_checkins"][today][self.department]:
                data["daily_checkins"][today][self.department].remove(user_id)
        save_data(data)

        channel_id = DEPARTMENT_CHANNELS.get(self.department)
        if channel_id:
            channel = interaction.guild.get_channel(channel_id)
            if channel:
                embed = discord.Embed(
                    title=f"{self.action}‡πÄ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ({self.department})",
                    description=f"‡πÇ‡∏î‡∏¢: {interaction.user.mention}\n‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°: `{name}`\n‡πÄ‡∏ß‡∏•‡∏≤: {thai_time()}",
                    color=discord.Color.green() if self.action == "‡πÄ‡∏Ç‡πâ‡∏≤" else discord.Color.red()
                )
                embed.set_image(url="attachment://uploaded.png")
                await channel.send(embed=embed, file=discord.File(fp=file.fp, filename="uploaded.png"))
        await interaction.followup.send(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£{self.action}‡πÄ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)

# ================= ‡∏õ‡∏∏‡πà‡∏° =================
class CheckinView(View):
    def __init__(self, department):
        super().__init__(timeout=None)
        self.add_item(Button(label="üì• ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£", style=discord.ButtonStyle.green, custom_id=f"checkin_{department}_in"))
        self.add_item(Button(label="üì§ ‡∏≠‡∏≠‡∏Å‡πÄ‡∏ß‡∏£", style=discord.ButtonStyle.red, custom_id=f"checkin_{department}_out"))

@bot.event
async def on_interaction(interaction):
    if interaction.type == discord.InteractionType.component:
        cid = interaction.data["custom_id"]
        if cid.startswith("checkin_"):
            _, department, action = cid.split("_")
            role_id = DEPARTMENTS.get(department)
            if role_id not in [r.id for r in interaction.user.roles]:
                await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ!", ephemeral=True)
                return
            modal = CheckinModal("‡πÄ‡∏Ç‡πâ‡∏≤" if action == "in" else "‡∏≠‡∏≠‡∏Å", department)
            await interaction.response.send_modal(modal)

# ================= ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏£ =================
@bot.command(name="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏£")
async def report_cmd(ctx):
    today = datetime.now(tz).strftime("%Y-%m-%d")
    for dep, role_id in DEPARTMENTS.items():
        role = ctx.guild.get_role(role_id)
        members = role.members if role else []
        checked_in = data["daily_checkins"].get(today, {}).get(dep, [])
        desc = ""
        for m in members:
            status = "‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£" if str(m.id) in checked_in else "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£"
            short_count = data["short_hours_count"].get(str(m.id), 0)
            absent_count = data["absent_count"].get(str(m.id), 0)
            extra = []
            if short_count > 0:
                extra.append(f"‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö {short_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            if absent_count > 0:
                extra.append(f"‡∏Ç‡∏≤‡∏î‡πÄ‡∏ß‡∏£ {absent_count} ‡∏ß‡∏±‡∏ô")
            status_text = f"{status}" + (f" / {' , '.join(extra)}" if extra else "")
            desc += f"{m.display_name} ({status_text})\n"
        if not desc:
            desc = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"
        embed = discord.Embed(
            title=f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏£ {dep} ({today})",
            description=desc,
            color=discord.Color.blue()
        )
        embed.set_image(url=DEPARTMENT_IMAGES.get(dep, ""))
        await ctx.send(embed=embed)

# ================= ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ =================
async def send_daily_report(guild):
    today = datetime.now(tz).strftime("%Y-%m-%d")
    admin_channel = guild.get_channel(ADMIN_CHANNEL_ID)
    if not admin_channel:
        return
    for dep, role_id in DEPARTMENTS.items():
        role = guild.get_role(role_id)
        members = role.members if role else []
        checked_in = data["daily_checkins"].get(today, {}).get(dep, [])
        desc = ""
        for m in members:
            status = "‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£" if str(m.id) in checked_in else "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£"
            short_count = data["short_hours_count"].get(str(m.id), 0)
            absent_count = data["absent_count"].get(str(m.id), 0)
            extra = []
            if short_count > 0:
                extra.append(f"‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö {short_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            if absent_count > 0:
                extra.append(f"‡∏Ç‡∏≤‡∏î‡πÄ‡∏ß‡∏£ {absent_count} ‡∏ß‡∏±‡∏ô")
            status_text = f"{status}" + (f" / {' , '.join(extra)}" if extra else "")
            desc += f"{m.display_name} ({status_text})\n"
        if not desc:
            desc = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"
        embed = discord.Embed(
            title=f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ({dep}) - {today}",
            description=desc,
            color=discord.Color.blue()
        )
        embed.set_image(url=DEPARTMENT_IMAGES.get(dep, ""))
        await admin_channel.send(embed=embed)

# ================= ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô =================
@tasks.loop(time=time(hour=0, minute=0, tzinfo=tz))
async def daily_check():
    guild = bot.guilds[0]
    for dep, role_id in DEPARTMENTS.items():
        role = guild.get_role(role_id)
        if not role:
            continue
        for member in role.members:
            uid = str(member.id)
            hours = data["work_hours"].get(uid, 0)
            if hours < MIN_HOURS:
                data["short_hours_count"][uid] = data["short_hours_count"].get(uid, 0) + 1
                if data["short_hours_count"][uid] >= (MAX_SHORT_HOURS + 1):
                    await remove_role_and_reset(member, role_id, guild)
                    continue
                else:
                    await send_warning(member, f"‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö {MIN_HOURS} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á! ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {data['short_hours_count'][uid]}/3", guild)
            else:
                data["short_hours_count"][uid] = 0

            data["absent_count"][uid] = data["absent_count"].get(uid, 0)
            if hours == 0:
                data["absent_count"][uid] += 1
            else:
                data["absent_count"][uid] = 0
            if data["absent_count"][uid] >= MAX_ABSENT_DAYS:
                await remove_role_and_reset(member, role_id, guild)
                continue

            data["work_hours"][uid] = 0
    save_data(data)
    await send_daily_report(guild)

# ================= ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå =================
@bot.command(name="‡∏ï‡∏≥‡∏£‡∏ß‡∏à")
async def post_police(ctx):
    if ctx.author.guild_permissions.administrator:
        embed = discord.Embed(
            title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£ - ‡∏ï‡∏≥‡∏£‡∏ß‡∏à",
            description="**‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å‡πÄ‡∏ß‡∏£ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!**",
            color=discord.Color.blue()
        )
        embed.set_image(url=DEPARTMENT_IMAGES["‡∏ï‡∏≥‡∏£‡∏ß‡∏à"])
        await ctx.send(embed=embed, view=CheckinView("‡∏ï‡∏≥‡∏£‡∏ß‡∏à"))

@bot.command(name="‡∏´‡∏°‡∏≠")
async def post_doctor(ctx):
    if ctx.author.guild_permissions.administrator:
        embed = discord.Embed(
            title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£ - ‡∏´‡∏°‡∏≠",
            description="**‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å‡πÄ‡∏ß‡∏£ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!**",
            color=discord.Color.blue()
        )
        embed.set_image(url=DEPARTMENT_IMAGES["‡∏´‡∏°‡∏≠"])
        await ctx.send(embed=embed, view=CheckinView("‡∏´‡∏°‡∏≠"))

@bot.command(name="‡∏™‡∏†‡∏≤")
async def post_council(ctx):
    if ctx.author.guild_permissions.administrator:
        embed = discord.Embed(
            title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£ - ‡∏™‡∏†‡∏≤",
            description="**‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å‡πÄ‡∏ß‡∏£ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!**",
            color=discord.Color.blue()
        )
        embed.set_image(url=DEPARTMENT_IMAGES["‡∏™‡∏†‡∏≤"])
        await ctx.send(embed=embed, view=CheckinView("‡∏™‡∏†‡∏≤"))

@bot.event
async def on_ready():
    print(f"Bot {bot.user} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
    daily_check.start()

bot.run(TOKEN)